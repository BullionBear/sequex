syntax = "proto3";

package order;

option go_package = "./protobuf/order";

import "google/protobuf/timestamp.proto";
import "google/type/decimal.proto";

// BUY or SELL side of an order
enum Side {
  SIDE_UNSPECIFIED = 0;
  BUY  = 1;
  SELL = 2;
}

// Optional: how long a Limit Order remains active
enum TimeInForce {
  TIF_UNSPECIFIED = 0;
  GTC = 1; // Good‑Till‑Cancelled
  IOC = 2; // Immediate‑Or‑Cancel
  FOK = 3; // Fill‑Or‑Kill
}

// ----- Order Request Messages -------------------------------------------

message MarketOrderRequest {
  string account = 1;
  string symbol  = 2;               // e.g. "BTCUSDT"
  Side   side    = 3;               // BUY or SELL
  google.type.Decimal quantity = 4;              // base‑asset size
}

message LimitOrderRequest {
  string account = 1;
  string symbol        = 2;
  Side   side          = 3;
  google.type.Decimal quantity      = 4;
  google.type.Decimal price         = 5;         // limit price
  TimeInForce tif      = 6;         // time‑in‑force (optional)
}

message StopMarketOrderRequest {
  string account = 1;
  string symbol      = 2;
  Side   side        = 3;
  google.type.Decimal quantity    = 4;
  google.type.Decimal stop_price  = 5;           // trigger price for the stop
}

// ----- Generic Response ---------------------------------------------------

message OrderResponse {
  string sequex_id   = 1;           // unique order ID
  string status      = 2;           // initial status, e.g. "NEW"
}

// ----- Service Definitions -----------------------------------------------

// Spot market orders (e.g. BTC/USDT)
service BinanceOrderService {
  rpc PlaceMarketOrder      (MarketOrderRequest)      returns (OrderResponse);
  rpc PlaceLimitOrder       (LimitOrderRequest)       returns (OrderResponse);
  rpc PlaceStopMarketOrder  (StopMarketOrderRequest)  returns (OrderResponse);
}

// Perpetual futures orders (e.g. BTCUSDT‑PERP)
service BinancePerpOrderService {
  rpc PlaceMarketOrder      (MarketOrderRequest)      returns (OrderResponse);
  rpc PlaceLimitOrder       (LimitOrderRequest)       returns (OrderResponse);
  rpc PlaceStopMarketOrder  (StopMarketOrderRequest)  returns (OrderResponse);
}
