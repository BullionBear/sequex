// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: proto/sequex.proto

package sequex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SequexService_OnEvent_FullMethodName = "/sequex.SequexService/OnEvent"
)

// SequexServiceClient is the client API for SequexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for streaming Events
type SequexServiceClient interface {
	OnEvent(ctx context.Context, opts ...grpc.CallOption) (SequexService_OnEventClient, error)
}

type sequexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequexServiceClient(cc grpc.ClientConnInterface) SequexServiceClient {
	return &sequexServiceClient{cc}
}

func (c *sequexServiceClient) OnEvent(ctx context.Context, opts ...grpc.CallOption) (SequexService_OnEventClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SequexService_ServiceDesc.Streams[0], SequexService_OnEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &sequexServiceOnEventClient{ClientStream: stream}
	return x, nil
}

type SequexService_OnEventClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type sequexServiceOnEventClient struct {
	grpc.ClientStream
}

func (x *sequexServiceOnEventClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sequexServiceOnEventClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SequexServiceServer is the server API for SequexService service.
// All implementations must embed UnimplementedSequexServiceServer
// for forward compatibility
//
// Service definition for streaming Events
type SequexServiceServer interface {
	OnEvent(SequexService_OnEventServer) error
	mustEmbedUnimplementedSequexServiceServer()
}

// UnimplementedSequexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSequexServiceServer struct {
}

func (UnimplementedSequexServiceServer) OnEvent(SequexService_OnEventServer) error {
	return status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (UnimplementedSequexServiceServer) mustEmbedUnimplementedSequexServiceServer() {}

// UnsafeSequexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequexServiceServer will
// result in compilation errors.
type UnsafeSequexServiceServer interface {
	mustEmbedUnimplementedSequexServiceServer()
}

func RegisterSequexServiceServer(s grpc.ServiceRegistrar, srv SequexServiceServer) {
	s.RegisterService(&SequexService_ServiceDesc, srv)
}

func _SequexService_OnEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SequexServiceServer).OnEvent(&sequexServiceOnEventServer{ServerStream: stream})
}

type SequexService_OnEventServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type sequexServiceOnEventServer struct {
	grpc.ServerStream
}

func (x *sequexServiceOnEventServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sequexServiceOnEventServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SequexService_ServiceDesc is the grpc.ServiceDesc for SequexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequex.SequexService",
	HandlerType: (*SequexServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnEvent",
			Handler:       _SequexService_OnEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/sequex.proto",
}
